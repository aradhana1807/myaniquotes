{"version":3,"sources":["components/Quotes.js","App.js","reportWebVitals.js","index.js"],"names":["Quotes","useState","quote","setQuote","character","setCharacter","anime","setAnime","useEffect","getQuote","fetch","then","res","json","data","dataQuotes","id","onClick","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLAuDeA,EAtDA,WAEX,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAkCF,mBAAS,IAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0BJ,mBAAS,IAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACNC,MACD,IAEH,IAAMA,EAAW,WAEbC,MADU,2CAELC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF,IAAIC,EAAaD,EACjBX,EAASY,EAAWb,OACpBG,EAAaU,EAAWX,WACxBG,EAASQ,EAAWT,WAQhC,OACI,sBAAKU,GAAG,YAAR,UACA,2CACI,qBAAKA,GAAG,OAAR,SACI,4BACKd,MAGT,sBAAKc,GAAG,YAAR,UACI,4BACKZ,IAGL,mCACOE,QAIX,qBAAKU,GAAG,UAAR,SACI,wBAAQC,QAtBA,WAChBR,KAqBsCO,GAAG,YAAjC,gC,MClCDE,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d04668df.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nconst Quotes = () => {\r\n\r\n    const [quote, setQuote] = useState('');\r\n    const [character, setCharacter] = useState('');\r\n    const [anime, setAnime] = useState('');\r\n\r\n    useEffect(() => {\r\n        getQuote()\r\n    }, []);\r\n\r\n    const getQuote = () => {\r\n        let url = 'https://animechan.vercel.app/api/random';\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                let dataQuotes = data;\r\n                setQuote(dataQuotes.quote);\r\n                setCharacter(dataQuotes.character);\r\n                setAnime(dataQuotes.anime);\r\n\r\n            })\r\n    }\r\n\r\n    const handleClick = () => {\r\n        getQuote();\r\n    }\r\n    return (\r\n        <div id=\"quote-box\">\r\n        <h1>AniQuotes</h1>\r\n            <div id=\"text\">\r\n                <p>\r\n                    {quote}\r\n                </p>\r\n            </div>\r\n            <div id=\"character\">\r\n                <p>\r\n                    {character}\r\n                </p>\r\n\r\n                <p>\r\n                    , {anime}\r\n                </p>\r\n            </div>\r\n\r\n            <div id=\"buttons\">\r\n                <button onClick={handleClick} id=\"new-quote\">\r\n                    Random Quote\r\n                </button>\r\n            </div>\r\n\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default Quotes;","import React from 'react';\nimport Quotes from './components/Quotes';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Quotes />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}